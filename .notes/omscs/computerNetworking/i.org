#+STARTUP: inlineimages
ssh:mininet@192.168.99.101

- Project 3 - TCP
* good performance of BIC-TCP comes from the slow increase around W_max and linear increase during additive increase and max probing
** [[file:./pics/bic.png]]
** after loss event, it registers W_max to be the window size where the loss event occurred and performs a multiplicative decrease of congestion window by a factor of beta where beta is a window decrease constant and the regular fast recovery and retransmit of TCP
** after it enters congestion avoidance from fast recovery, it starts to increase the window using the concave profile of the cubic function, setting its plateau at W_max so the concave growth continues until the window size becomes W_max.
** Next, cubic funciton turns into a convex profile and convex window growth begins.
** This improves protocol and network stability because window size remains almost constant, forming plateau around W_max where network utilization is deemed highest and under steady state.
** note protocols with convex growth functions tend to have largest window increment around saturation point, introducing large burst of packet losses
** W(t) = C(t-K)^3 + W_max
# C-c C-x \ subscript&superscript
** if cwnd < TCP window size, then CUBIC runs in TCP mode
** if cwnd < W_max then CUBIC is concave, else CUBIC is convex
** multiplicative decrease factor of beta to 0.2. anything less than 0.5 leads to slower convergence, but makes analysis easier.
** fast convergence
*** when loss event occurs, remembers last value of W_max before it updates W_max for the current loss event (W_last__max)
**** if W_max < W_last__max this means saturation point experienced by this flow is getting reduced because of the change in available bandwidth. Then we allow this flow to release more bandwidth by reducing W_max further, which effectively lengthens the time for this flow to increase its window because the reduced W_max forces the flow to have the plateau earlier. Allows more time for new flow to catch up its window size
**** 
