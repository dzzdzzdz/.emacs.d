#+STARTUP: overview
* interface tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "s-r") 'revert-buffer)
    (column-number-mode 1)
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil)
    (global-linum-mode 1)
    (global-visual-line-mode 1)

    (global-subword-mode 1)
    (set-face-attribute 'default nil :height 130)
    (setq explicit-shell-file-name "/bin/zsh")

    (defun my-backup-file-name (fpath)
      "Return a new file path of a given file path.
	  If the new path's directories does not exist, create them."
      (let* (
	     (backupRootDir "~/.emacs.d/backup/")
	     (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
	     (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
	     )
	(make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
	backupFilePath))

    (setq make-backup-file-name-function 'my-backup-file-name)
    ;; use (C-c ') for editor
  #+END_SRC

  #+RESULTS:
  : my-backup-file-name
* eshell
  #+BEGIN_SRC emacs-lisp
    (add-hook 'eshell-mode-hook (lambda () (linum-mode -1)))
  #+END_SRC

  #+RESULTS:
  | lambda | nil | (linum-mode -1) |
* theme
  #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-nova t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
  #+END_SRC

  #+RESULTS:
  : t
  
* keys
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-<return>") 'execute-extended-command)
  ;(global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-M-o") 'ace-swap-window)
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "C-x C-g") 'goto-line)
  #+END_SRC

  #+RESULTS:
  : goto-line

* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

* org-mode stuff
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    (use-package htmlize
      :ensure t)
  #+END_SRC

  #+RESULTS:

* ispell
  C-c $ to teach
  #+BEGIN_SRC emacs-lisp    
    (setq ispell-program-name "/usr/local/bin/ispell")
    (add-hook 'org-mode-hook 'flyspell-mode)
    ; notes files
    (setq org-agenda-files (list "~/.emacs.d/.notes/work/dh/main.org"
				 "~/.emacs.d/.notes/omscs/computerNetworking/i.org"
				 "~/.emacs.d/.notes/.dzzdzzdz.org"))
  #+END_SRC

  #+RESULTS:
  | ~/.emacs.d/.notes/work/dh/main.org | ~/.emacs.d/.notes/omscs/computerNetworking/i.org | ~/.emacs.d/.notes/.dzzdzzdz.org |

* ido
  #+BEGIN_SRC emacs-lisp
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
  
* ibuffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)

    ; If you like a tabbar
    ;; (use-package tabbar
    ;;   :ensure t
    ;;   :config
    ;;   (tabbar-mode 1))
  #+END_SRC

* windows
  #+BEGIN_SRC emacs-lisp
    (winner-mode 1) ; C-left, C-right for state
    (windmove-default-keybindings) ; shift + arrow
  #+END_SRC
* ace-window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :config
      (progn
	(global-set-key [remap other-window] 'ace-window)

	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	)
      (setq aw-scope 'visible))
      ;(setq aw-ignore-on t)
      ;(setq aw-ignored-buffers '("*minimap*"))
  #+END_SRC

  #+RESULTS:
  : t

* swiper
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :bind
      (("M-y" . counsel-yank-pop)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line)))

    (use-package swiper
      :ensure try
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(global-set-key "\C-s" 'swiper)
	(global-set-key (kbd "C-c C-r") 'ivy-resume)
	(global-set-key (kbd "<f6>") 'ivy-resume)
	(global-set-key (kbd "M-x") 'counsel-M-x)
	(global-set-key (kbd "C-x C-f") 'counsel-find-file)
	(global-set-key (kbd "<f1> f") 'counsel-describe-function)
	(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	(global-set-key (kbd "<f1> l") 'counsel-load-library)
	(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	(global-set-key (kbd "C-c g") 'counsel-git)
	(global-set-key (kbd "C-c j") 'counsel-git-grep)
	(global-set-key (kbd "C-c k") 'counsel-ag)
	(global-set-key (kbd "C-x l") 'counsel-locate)
	(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

  #+RESULTS:
  : t
  
* auto-complete  
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC

* flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
* undo tree
  C-x u to visualise tree
  C-x d for diff
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC
* misc packages
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      (setq beacon-color "#fcfc83"))

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package aggressive-indent
      :ensure t
      :config
      (global-aggressive-indent-mode 1))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    ; C-;
    (use-package iedit
      :ensure t)

    (setq save-interprogram-paste-before-kill t)
  #+END_SRC

  #+RESULTS:
  : t
* magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init)
  #+END_SRC

  #+RESULTS:

* web mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
	    '(("django" . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
	    '(("css" . (ac-source-css-property))
	      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t))
  
  #+END_SRC

  #+RESULTS:
  : t
* json mode
  C-c C-f: format the region/buffer with json-reformat (https://github.com/gongo/json-reformat)
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t
      :init)
  #+END_SRC
* minimap
  #+BEGIN_SRC emacs-lisp
    ;; (use-package minimap
    ;;   :ensure t
    ;;   :config
    ;;   (setq minimap-window-location "right")
    ;;   (global-minimap-mode 1))
  #+END_SRC
  #+RESULTS:
* yaml mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
      (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
      (add-hook 'yaml-mode-hook
		'(lambda ()
		   (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
  #+END_SRC

  #+RESULTS:
  : t
* projectile
  Project: C-c C-p
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c C-p") 'projectile-command-map)
      (setq projectile-completion-system 'ivy))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-on))
  #+END_SRC

  #+RESULTS:
  : t

* dumb-jump
  M-g j
  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :bind (("M-g o" . dumb-jump-go-other-window)
	     ("M-g j" . dumb-jump-go)
	     ("M-g x" . dumb-jump-go-prefer-external)
	     ("M-g z" . dumb-jump-go-prefer-external-other-window))
      :config 
      ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
      :init
      (dumb-jump-mode)
      :ensure
      )
  #+END_SRC

  #+RESULTS:
  : dumb-jump-go-prefer-external-other-window
